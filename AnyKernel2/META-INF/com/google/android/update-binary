#!/sbin/sh
# AnyKernel2 Backend
# osm0sis @ xda-developers

OUTFD=/proc/self/fd/$2;
ZIP="$3";
DIR=`dirname "$ZIP"`;

ui_print() {
  until [ ! "$1" ]; do
    echo -e "ui_print $1\nui_print" > $OUTFD;
    shift;
  done;
}
show_progress() { echo "progress $1 $2" > $OUTFD; }
set_perm_recursive() {
  dirs=$(echo $* | $bb awk '{ print substr($0, index($0,$5)) }');
  for i in $dirs; do
    $bb chown -R $1:$2 $i;
    find "$i" -type d -exec chmod $3 {} +;
    find "$i" -type f -exec chmod $4 {} +;
  done;
}
file_getprop() { grep "^$2" "$1" | cut -d= -f2; }
getprop() { test -e /sbin/getprop && /sbin/getprop $1 || file_getprop /default.prop $1; }
cleanup() { rm -rf /tmp/anykernel; }
cleanup() {
  cd /tmp;
  rm -rf /tmp/anykernel;
}
debugging;
if [ "$(file_getprop /tmp/anykernel/anykernel.sh do.cleanuponabort)" == 1 ]; then
    abort() { ui_print "$*"; cleanup; umount /system; umount /data; unmount_all; exit 1; }
  else
    abort() { ui_print "$*"; umount /system; umount /data; unmount_all; exit 1; }
fi;
show_progress 1.34 4;
ui_print " ";
cleanup;
mkdir -p /tmp/anykernel/bin;
cd /tmp/anykernel;
unzip -o "$ZIP";
if [ $? != 0 -o -z "$(ls /tmp/anykernel/tools)" ]; then
  abort "Unzip failed. Aborting...";
fi;
chmod -R 755 /tmp/anykernel/tools /tmp/anykernel/bin;
bb=/tmp/anykernel/tools/busybox;
ui_print "$(file_getprop /tmp/anykernel/anykernel.sh kernel.string)";
ui_print "  ";
ui_print " _         ";
ui_print "| |_   _ _   ___   ___   _  ";
ui_print "| | | | | | | \ \ / / | | | ":
ui_print "| | |_| | |_| |\ V /| |_| | ";
ui_print "|_|\__,_|\__,_| \_/  \__, | ";
ui_print "                     |___/  ";
ui_print "   __ __                 __ ";
ui_print "  / //_/__ _______  ___ / / ";
ui_print " / ,< / -_) __/ _ \/ -_) /  ";
ui_print "/_/|_|\__/_/ /_//_/\__/_/   ";
ui_print "    ";
unmount_all;
if [ ! "$(is_mounted /system)" ]; then
  $bb mount -o ro -t auto /system;
fi;
($bb mount -o ro -t auto /vendor;
$bb mount /data) 2>/dev/null;
if [ -f /system/system/build.prop ]; then
  umount /system;
  (umount /system;
  mkdir /system_root) 2>/dev/null;
  $bb mount -o ro -t auto /dev/block/bootdevice/by-name/system /system_root;
  $bb mount -o bind /system_root/system /system;
fi;

savedpath="$LD_LIBRARY_PATH";
savedpre="$LD_PRELOAD";
unset LD_LIBRARY_PATH;
unset LD_PRELOAD;

if [ ! "$(getprop 2>/dev/null)" ]; then
  getprop() {
    local propval="$(file_getprop /default.prop $1 2>/dev/null)";
    test "$propval" || local propval="$(file_getprop /system/build.prop $1 2>/dev/null)";
    test "$propval" && echo "$propval" || echo "";
  }
elif [ ! "$(getprop ro.product.device 2>/dev/null)" -a ! "$(getprop ro.build.product 2>/dev/null)" ]; then
  getprop() {
    ($(which getprop) | $bb grep "$1" | $bb cut -d[ -f3 | $bb cut -d] -f1) 2>/dev/null;
  }
fi;

if [ "$(file_getprop /tmp/anykernel/anykernel.sh do.devicecheck)" == 1 ]; then
  ui_print "Checking device...";
  for i in 1 2 3 4 5; do
    testname="$(file_getprop /tmp/anykernel/anykernel.sh device.name$i)";
    if [ "$(getprop ro.product.device)" == "$testname" -o "$(getprop ro.build.product)" == "$testname" ]; then
      ui_print "$testname";
      match=1;
    fi;
  done;
  ui_print " ";
  if [ "$match" != 1 ]; then
    abort "Unsupported device. Aborting...";
  fi;
  ui_print "Checking for Project Treble...";
  if [ "$(file_getprop /system/build.prop ro.treble.enabled)" == "true" ]; then
    ui_print "Treble Status: Supported";
    dtb=/tmp/anykernel/dtb-treble;
  else
    ui_print "Treble Status: Not supported";
    dtb=/tmp/anykernel/dtb-nontreble;
  fi;
fi;

fi;
if [ "$(file_getprop /tmp/anykernel/anykernel.sh do.initd)" == 1 ]; then
  ui_print ".**************************************.";
  mkdir /system/etc/init.d;
  set_perm_recursive 0 0 0755 0755 /system/etc/init.d;
fi;

if [ "$(file_getprop /tmp/anykernel/anykernel.sh do.system)" == 1 ]; then
  ui_print ".+++++++++Releasing Luuvy Kernel++++++++++.";
  ui_print "Kernel: Luuvy";
  ui_print "By: zeta96";
  cp -fr /tmp/anykernel/system/* /system/;
  set_perm_recursive 0 0 0755 0755 /system/etc/init.d/Velocity;
fi;

supported_ver="$(file_getprop anykernel.sh supported.versions | $bb tr -d '[:space:]')";
if [ "$supported_ver" ]; then
  ui_print "Checking Android version...";
  android_ver="$(file_getprop /system/build.prop ro.build.version.release)";
  if [ "$(echo $supported_ver | $bb grep -)" ]; then
    lo_ver=$(echo $supported_ver | $bb cut -d- -f1);
    hi_ver=$(echo $supported_ver | $bb cut -d- -f2);
    if [ "$(echo -e "$(int2ver $hi_ver)\n$(int2ver $lo_ver)\n$(int2ver $android_ver)" | $bb sort -g | $bb grep -n "$(int2ver $android_ver)" | $bb grep '^2:')" ]; then
      supported=1;
    fi;
  else
    for ver in $(echo $supported_ver | $bb sed 's;,; ;g'); do
      if [ "$(int2ver $ver)" == "$(int2ver $android_ver)" ]; then
        supported=1;
        break;
      fi;
    done;
  fi;
  if [ "$supported" ]; then
    ui_print "$android_ver";
    ui_print " ";
  else
    ui_print " ";
    abort "Unsupported Android version. Aborting...";
  fi;
  is_miui="$(file_getprop /system/build.prop 'ro.miui.ui.version.code')"
  if [[ -z $is_miui ]]; then
    ui_print "You are running a custom ROM!"
  else
    abort "You are running Miui... Aborting...";
  fi
fi;


ui_print "Installing kernel...";
for i in $($bb --list); do
  $bb ln -s $bb /tmp/anykernel/bin/$i;
done;
if [ $? != 0 -o -z "$(ls /tmp/anykernel/bin)" ]; then
  abort "Recovery busybox setup failed. Aborting...";
fi;
PATH="/tmp/anykernel/bin:$PATH" $bb ash /tmp/anykernel/anykernel.sh $2;
if [ $? != "0" ]; then
  abort;
fi;

if [ "$(file_getprop /tmp/anykernel/anykernel.sh do.modules)" == 1 ]; then
  ui_print " ";
  ui_print "Pushing modules...";
  mount -o rw,remount -t auto /system;
  cp -rf /tmp/anykernel/modules/* $root/system/lib/modules/;
  set_perm_recursive 0 0 0755 0644 $root/system/lib/modules;
  mount -o ro,remount -t auto /system;
fi;

debugging;
if [ "$(file_getprop /tmp/anykernel/anykernel.sh do.cleanup)" == 1 ]; then
  cleanup;
fi;

test "$savedpath" && export LD_LIBRARY_PATH="$savedpath";
test "$savedpre" && export LD_PRELOAD="$savedpre";


ui_print " ";
ui_print "Running fstrim...";
fstrim -v /system;
fstrim -v /data;
fstrim -v /vendor;

umount /system;
umount /data;
unmount_all;

ui_print " ";
ui_print "Done!";
